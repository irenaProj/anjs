[{
    "answer": "If the code is short and sweet, embed it between < script > and < /script > tags, otherwise use the following code:",
    "code": "<script src=\"code.js\"><br></script>",
    "level": "Easy",
    "question": "How to embed JavaScript in HTML page?",
    "topic": "HTML",
    "id": "00da2ad5796129a3"
}, {
    "code": "document.form.login.submit(); // or (less preferable due to its dependency on page structure): document.form[0].submit();",
    "level": "Easy",
    "question": "How do you submit a form using Javascript?",
    "topic": "JavaScript",
    "id": "8c8ba3775773cb50"
}, {
    "question": "What is DOM?",
    "answer": "The Document Object Model, or DOM, is the fundamental API for representing and manipulating the content of HTML and XML documents.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "d3400173562fd877"
}, {
    "code": "var content = Array.prototype.map.call(                 document.getElementsByTagName(\"h1\"),                  function(e) { return e.innerHTML; });",
    "level": "Easy",
    "question": "How to get a content of all specified elements?",
    "topic": "JavaScript",
    "id": "1636497c22fbfa3f"
}, {
    "question": "How to read and write a file using JavaScript?",
    "answer": "By coding Java applet to accommodate the script. Cannot be done using JavaScript.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "6d6963e65ad39808"
}, {
    "question": "What are JavaScript types?",
    "answer": "Number, String, Boolean, Function, Object, Null, Undefined.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "c32fb0e5188adbe6"
}, {
    "question": "How do you convert numbers between different bases in JavaScript?",
    "answer": "Use the parseInt() function, that takes a string as the first parameter, and the base as a second parameter. So to convert hexadecimal 3F to decimal, use parseInt (\\\"3F\\\", 16); ",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "b4680738475218ca"
}, {
    "code": "//Create array of size 10 var arr = new Array(10);  // Create two dimentional array var mat = new Array(len);  for(var i = 0; i < len; i++) {     mat[i] = new Array(len); }  for(var i = 0; i < len; i++) {     for(var k = 0; k < len; k++) {         mat[i][k] = 0;     } } ",
    "level": "Easy",
    "question": "How to create arrays in JavaScript?",
    "topic": "JavaScript",
    "id": "7e8c8e0a501f08ab"
}, {
    "question": "What is negative infinity?",
    "answer": "The Number.NEGATIVE_INFINITY property represents the negative Infinity value, derived by dividing negative number by zero.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "33698082fd927bd7"
}, {
    "question": "In a pop-up browser window, how do you refer to the main browser window that opened it?",
    "answer": "Use window.opener to refer to the main window from pop-ups.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "f0484b0af3416893"
}, {
    "question": "What is the data type of variables in JavaScript?",
    "answer": "All variables are of object type in JavaScript.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "81041ab767a7789f"
}, {
    "question": "What is a fixed-width table and its advantages?",
    "answer": "Fixed width tables are rendered by the browser based on the widths of the columns in the first row, resulting in a faster display in case of large tables. Use the CSS style table-layout:fixed to specify a fixed width table. If the table is not specified to be of fixed width, the browser has to wait till all data is downloaded and then infer the best width for each of the columns. This process can be very slow for large tables. ",
    "topic": "HTML",
    "level": "Easy",
    "id": "8c0d2f86ec0838ae"
}, {
    "question": "Methods GET and POST in HTML forms - what\\'s the difference?",
    "answer": "GET: Parameters are passed in the querystring. Maximum amount of data that can be sent via the GET method is limited to about 2kb.\\r\\nPOST: Parameters are passed in the request body. There is no limit to the amount of data that can be transferred using POST. However, there are limits on the maximum amount of data that can be transferred in one name/value pair.",
    "topic": "HTML",
    "level": "Intermediate",
    "id": "3255784b4daea8ad"
}, {
    "answer": "Include the name of the frame in the target attribute of the hyperlink.",
    "code": "<a href=\"mypage.htm\" target\"myframe\">My Page</a>",
    "level": "Intermediate",
    "question": "How do you target a specific frame from a hyperlink?",
    "topic": "HTML",
    "id": "287d8bec7dfc799b"
}, {
    "answer": "Enterprise bean timers are either programmatic timers or automatic timers. When a programmatic timer expires (goes off), the container calls the method\\r\\nannotated @Timeout in the bean\\'s implementation class. The @Timeout method contains\\r\\nthe business logic that handles the timed event. Methods annotated @Timeout in the enterprise bean class must return void and optionally take a javax.ejb.Timer object as the only parameter. They may not throw application exceptions.",
    "code": "@Timeout public void timeout(Timer timer) {     System.out.println(\"TimerBean: timeout occurred\"); }",
    "level": "Intermediate",
    "question": "What is a programmatic timer and how is it used?",
    "topic": "J2EE",
    "id": "0e0462aade9ea8ba"
}, {
    "code": "public double max(int... params) {     int localMax = Integer.MIN_VALUE;      for (int p : params) {         if (p > localMax){             localMax = p;         }     }      return localMax; }",
    "level": "Intermediate",
    "question": "How to create and use function in Java that takes variable number of parameters?",
    "topic": "Java",
    "id": "6b0134458ec7681a"
}, {
    "question": "What is default method?",
    "answer": "Default method is a method implemented in an interface class, declared with keyword \\\"default\\\". It allows adding new functionality to the existing interfaces while ensuring backward compatibility.",
    "topic": "Java",
    "level": "Easy",
    "id": "a86f47966d8c3b7c"
}, {
    "answer": "Anonymous class is an expression that allows declaration and instantiation of a class at the same time:",
    "code": "button.addActionListener(new ActionListener() {     public void actionPerformed(ActionEvent e) {         // perform the required operation     } });",
    "level": "Easy",
    "question": "What is anonymous inner class and how to use it?",
    "topic": "Java",
    "id": "ac4934b4f1b7986c"
}, {
    "answer": "If lambda expression consists of a call to one method , it is possible to replace it by reference to this method:",
    "code": "private class Book {     private double price;      public double getPrice() {         return price;     }      public void setPrice(double price) {         this.price = price;     }      public int compareByPrice(Book b1, Book b2){         double diff = b2.getPrice() - b1.getPrice();          if (diff == 0) return (int)diff;          return (diff > 0 ? 1 : -1);     } }  Arrays.sort(library, (b1, b2) -> {     return Book.compareByPrice(b1, b2); });  // Can be replaced by Arrays.sort(library, Book::compareByPrice);",
    "level": "Intermediate",
    "question": "Explain method references.",
    "topic": "Java",
    "id": "67878ff2934aaa3b"
}, {
    "question": "What is functional interface?",
    "answer": "A functional interface is any interface that contains only one abstract method.",
    "topic": "Java",
    "level": "Easy",
    "id": "36fc1d02f9d9a8cb"
}, {
    "answer": "Pass-through elements allow you to use HTML5 tags and attributes but to treat them as equivalent to JavaServer Faces components, for example, EL expressions can be used with them to retrieve managed bean properties (see example 1 below). Pass-through attributes allow to pass attributes that are not JavaServer Faces attributes through to the browser without interpretation (see example 2 below).",
    "code": "// Example 1 <html ... xmlns:jsf=\"http://xmlns.jcp.org/jsf\"     ...     <input type=\"email\" jsf:id=\"email\" name=\"email\"            value=\"#{reservationBean.email}\" required=\"required\"/>  // Example 2 <html ... xmlns:p=\"http://xmlns.jcp.org/jsf/passthrough\"     ...     <h:form prependId=\"false\">         <h:inputText id=\"nights\" p:type=\"number\" value=\"#{bean.nights}\"              p:min=\"1\" p:max=\"30\" p:required=\"required\"             p:title=\"Enter a number between 1 and 30 inclusive.\">              ...  Will be rendered as:     <input id=\"nights\" type=\"number\" value=\"1\" min=\"1\" max=\"30\"         required=\"required\" title=\"Enter a number between 1 and 30 inclusive.\">",
    "level": "Easy",
    "question": "What are pass-through elements and attributes?",
    "topic": "J2EE",
    "id": "9e4a1976c205b848"
}, {
    "question": "What is renderer?",
    "answer": "Renderer generates the markup to display a component on a web page.",
    "topic": "J2EE",
    "level": "Easy",
    "id": "6894cc669e1728a9"
}, {
    "answer": "Count the number of service methods that are running:",
    "code": "public class ShutdownExample extends HttpServlet {     private int serviceCounter = 0;      ...      // Access methods for serviceCounter     protected synchronized void enteringServiceMethod() {         serviceCounter++;     }      protected synchronized void leavingServiceMethod() {         serviceCounter--;     }      protected synchronized int numServices() {         return serviceCounter;     }      protected void service(HttpServletRequest req,                              HttpServletResponse resp) throws ServletException,IOException {         enteringServiceMethod();          try {             super.service(req, resp);         } finally {             leavingServiceMethod();         }     }",
    "level": "Intermediate",
    "question": "Write code to track service requests.",
    "topic": "J2EE",
    "id": "ae817aa6ac8bb837"
}, {
    "question": "What is JavaScript?",
    "answer": "JavaScript is a platform-independent,event-driven, interpreted client-side scripting and programming language developed by Netscape Communications Corp. and Sun Microsystems.",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "95b115b54bacdb2e"
}, {
    "code": "for( var i = 0; i < document.images.length; i ++) {     // Loop through all images    document.images[ i]. style.border = \"none\"; }",
    "level": "Easy",
    "question": "Set style border property on all page images.",
    "topic": "JavaScript",
    "id": "fc8340dbc6750951"
}, {
    "code": "public class ShutdownExample extends HttpServlet {     private boolean shuttingDown;      ...      //Access methods for shuttingDown     protected synchronized void setShuttingDown(boolean flag) {         shuttingDown = flag;     }      protected synchronized boolean isShuttingDown() {         return shuttingDown;     }      public void destroy() {         /* Check to see whether there are still service methods /*         /* running, and if there are, tell them to stop. */         if (numServices()> 0) {             setShuttingDown(true);         }          /* Wait for the service methods to stop. */         while (numServices() > 0) {             try {                 Thread.sleep(interval);             } catch (InterruptedException e) {}         }     }      // Methods that might run for a long time should check the value of the field that      // notifies them of shutdowns and should interrupt their work, if necessary     public void doPost(...) {         ...         for(i = 0; ((i < lotsOfStuffToDo) && !isShuttingDown()); i++) {             try {                 partOfLongRunningOperation(i);             } catch (InterruptedException e) {                 ...             }         }     }",
    "level": "Intermediate",
    "question": "Create polite long-running methods for clean shutdown",
    "topic": "J2EE",
    "id": "4e6802a501fc4aeb"
}, {
    "code": "@WebServlet(urlPatterns={\"/asyncioservlet\"}, asyncSupported=true) public class AsyncIOServlet extends HttpServlet {     @Override     public void doPost(HttpServletRequest request,                          HttpServletResponse response) throws IOException {         final AsyncContext acontext = request.startAsync();         final ServletInputStream input = request.getInputStream();         input.setReadListener(new ReadListener() {             byte buffer[] = new byte[4*1024];             StringBuilder sbuilder = new StringBuilder();              @Override             public void onDataAvailable() {                 try {                     do {                         int length = input.read(buffer);                         sbuilder.append(new String(buffer, 0, length));                     } while(input.isReady());                 } catch (IOException ex) { ... }             }              @Override             public void onAllDataRead() {                 try {                     acontext.getResponse().getWriter()                     .write(\"...the response...\");                 } catch (IOException ex) { ... }                 acontext.complete();             }              @Override             public void onError(Throwable t) { ... }         });     } }",
    "level": "Intermediate",
    "question": "Reading a large HTTP POST request using nonblocking I/O",
    "topic": "J2EE",
    "id": "918e5091f404290a"
}, {
    "answer": "From Wikipedia, the free encyclopedia:\\r\\nPrototype-based programming is a style of object-oriented programming in which inheritance is performed via a process of cloning existing objects that serve as prototypes.\\r\\nJavaScript supports prototype-based programming.",
    "code": "var foo = {one: 1, two: 2}; // bar.[[prototype]] = foo var bar = Object.create( foo ); bar.three = 3; bar.one; // 1 bar.two; // 2 bar.three; // 3",
    "level": "Easy",
    "question": "What is prototype-based programming?",
    "topic": "JavaScript",
    "id": "e8056fddf0f7db12"
}, {
    "question": "Explain imperative vs. declarative programming.",
    "answer": "From Wikipedia, the free encyclopedia:\\r\\nImperative programming is a programming paradigm that describes computation in terms of statements that change a program state.\\r\\nDeclarative programming expresses what the program should accomplish without prescribing how to do it in terms of sequences of actions to be taken.",
    "topic": "General",
    "level": "Easy",
    "id": "5141435e052e18e8"
}, {
    "question": "Explain the same-origin policy",
    "answer": "From Wikipedia, the free encyclopedia:\\r\\n\\r\\nThe policy permits scripts running on pages originating from the same site Ã¢Â€Â“ a combination of scheme, hostname, and port number[1] Ã¢Â€Â“ to access each other\\'s DOM with no specific restrictions, but prevents access to DOM on different sites.",
    "topic": "General",
    "level": "Easy",
    "id": "fe08d86c41091aa5"
}, {
    "question": "Explain cross-cite scripting.",
    "answer": "From Wikipedia, the free encyclopedia\\r\\n\\r\\nCross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. XSS enables attackers to inject client-side script into Web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same origin policy.",
    "topic": "General",
    "level": "Easy",
    "id": "b949fea89f37c87c"
}, {
    "answer": "Using as example <h1> tag:",
    "code": " h1 { display: inline }",
    "level": "Easy",
    "question": "How to remove line breaks after header tags?",
    "topic": "CSS",
    "id": "207b43fabd6009f9"
}, {
    "question": "Explain async/defer attributes for <script> tag.",
    "answer": "Async - indicate to the browser to execute script asynchronously, as soon as it is available.\\r\\nDefer - execute script as soon as the page is ready.\\r\\n\\r\\nIf no async/defer attribute is specified, script is executed immediately.",
    "topic": "JavaScript",
    "level": "Intermediate",
    "id": "49a270a73795d818"
}, {
    "answer": "\\\"==\\\" checks for equality only (type casting is performed if necessary), \\\"===\\\" checks for type as well.",
    "code": "false ==  0; // true false === 0; // false",
    "level": "Easy",
    "question": "What is the difference between == and ===?",
    "topic": "JavaScript",
    "id": "cb07439311935a7d"
}, {
    "question": "What is hoisting?",
    "answer": "Hoisting is silently moving functions and variables declarations to the top of the scope.",
    "topic": "JavaScript",
    "level": "Intermediate",
    "id": "ed3e5693c40ea831"
}, {
    "question": "Explain NaN.",
    "answer": "NaN is of type Number and represents not a number value.\\r\\n\\r\\nIn addition, NaN compared to anything (including NaN) is false. To check if something is a number, use: isNaN()",
    "topic": "JavaScript",
    "level": "Easy",
    "id": "3e21e5643552ab65"
}, {
    "code": "@WebServlet(urlPatterns={\"asyncservlet\"}, asyncSupported=true)     public class AsyncServlet extends HttpServlet {         /* ... Same variables and init method as in SyncServlet ... */         @Override            public void doGet(HttpServletRequest request, HttpServletResponse response) {             response.setContentType(\"text/html;charset=UTF-8\");             final AsyncContext acontext = request.startAsync();             acontext.start(new Runnable() {                 public void run() {                     String param = acontext.getRequest().getParameter(\"param\");                     String result = resource.process(param);                     HttpServletResponse response = acontext.getResponse();                      /* ... print to the response ... */                     acontext.complete();                 }             }",
    "level": "Intermediate",
    "question": "How to asynchronously process HTTP long request (access to database for example)?",
    "topic": "J2EE",
    "id": "2efeed6091e468b4"
}, {
    "answer": "1. Create a \\\"contracts\\\" section under Web Pages. \\r\\n2. Create directory for each required contract. \\r\\n3. Put HTML and CSS files specific for each contract in an appropriate directory.\\r\\n4. In faces-config.xml file create section that describes where each contract is used (see code below).",
    "code": "<application>     <resource-library-contracts>         <contract-mapping>             <url-pattern>*</url-pattern>             <contracts>basic</contracts>         </contract-mapping>     </resource-library-contracts> </application>",
    "level": "Intermediate",
    "question": "How to use JEE resource library contracts?",
    "topic": "J2EE",
    "id": "4cd560c67231c8e0"
}]
